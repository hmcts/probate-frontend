nodejs:
  applicationPort: 3000
  environment:
    REFORM_TEAM: probate
    REFORM_SERVICE_NAME: probate-frontend
    FEATURE_TOGGLES_API_URL: http://${SERVICE_NAME}-ftr-tgl-api
    IDAM_API_URL: https://preprod-idamapi.reform.hmcts.net:3511
    IDAM_URL: https://preprod-idamapi.reform.hmcts.net:3511
    IDAM_LOGIN_URL: https://idam.preprod.ccidam.reform.hmcts.net/login
    IDAM_S2S_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    S2S_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    PAYMENT_CREATE_URL: http://payment-api-aat.service.core-compute-aat.internal/card-payments
    VALIDATION_SERVICE_URL: http://probate-business-service-aat.service.core-compute-aat.internal/validate
    BUSINESS_DOCUMENT_URL: http://probate-business-service-aat.service.core-compute-aat.internal/businessDocument
    SUBMIT_SERVICE_URL: http://probate-submit-service-aat.service.core-compute-aat.internal
    PERSISTENCE_SERVICE_URL: http://probate-persistence-service-aat.service.core-compute-aat.internal/formdata
    REFORM_ENVIRONMENT : aat
    USE_REDIS : true
    REDIS_USE_TLS : false
    REDIS_HOST : ${SERVICE_NAME}-redis-master
    REDIS_PORT : 6379

# Don't modify below here
  image: ${IMAGE_NAME}
  ingressHost: ${SERVICE_FQDN}

rpe-feature-toggle-api:
  releaseNameOverride: ${SERVICE_NAME}-ftr-tgl-api
  importer:
    cron:
      enabled: false
    oneoff:
      enabled: false
#      command: >-
#        /scripts/add-weighted-toggle.sh cmc_admissions 'CMC admissions' '1.0' admin@example.com Password12 &&
#        /scripts/add-toggle.sh cmc_defence_reminders 'CMC defence reminders' false admin@example.com Password12
#      permissions: cmc-new-features-consent-given
  java:
    releaseNameOverride: ${SERVICE_NAME}-ftr-tgl-api
    ingressIP: ${INGRESS_IP}
    consulIP: ${CONSUL_LB_IP}
    registerAdditionalDns:
      enabled: true
      primaryIngressHost: ${SERVICE_FQDN}
      prefix: ftr-tgl
    environment:
      FEATURES_DB_HOST: ${SERVICE_NAME}-ft-db
      ADMIN_USERNAME_TEST: admin@example.com
      ADMIN_PASSWORD_TEST: Password12
      EDITOR_USERNAME_TEST: editor@example.com
      EDITOR_PASSWORD_TEST: Password12
  postgresql:
    postgresqlDatabase: hmcts

#redis:
#  cluster:
#    enabled: false
#  master:
#    persistence:
#      enabled: false
redis:
  ## Global Docker image registry
  ## Please, note that this will override the image registry for all the images, including dependencies, configured to use the global value
  ##
  # global:
  #   imageRegistry:

  ## Bitnami Redis image version
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ##
  image:
    registry: docker.io
    repository: bitnami/redis
    ## Bitnami Redis image tag
    ## ref: https://github.com/bitnami/bitnami-docker-redis#supported-tags-and-respective-dockerfile-links
    ##
    tag: 4.0.12
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  ## Cluster settings
  cluster:
    enabled: false
    slaveCount: 0

  networkPolicy:
    ## Specifies whether a NetworkPolicy should be created
    ##
    enabled: false

    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the port Redis is listening
    ## on. When true, Redis will accept connections from any source
    ## (with the correct destination port).
    ##
    # allowExternal: true

  serviceAccount:
    ## Specifies whether a ServiceAccount should be created
    ##
    create: false
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name:

  rbac:
    ## Specifies whether RBAC resources should be created
    ##
    create: false

    role:
      ## Rules to create. It follows the role specification
      # rules:
      #  - apiGroups:
      #    - extensions
      #    resources:
      #      - podsecuritypolicies
      #    verbs:
      #      - use
      #    resourceNames:
      #      - gce.unprivileged
      rules: []

  ## Use password authentication
  usePassword: false
